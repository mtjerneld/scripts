<#
.SYNOPSIS
    Converts mailchecker activity plan CSV to Wrike import format.

.DESCRIPTION
    This script converts the standard activity plan CSV format generated by mailchecker.ps1
    to a Wrike-compatible import format with hierarchical folder structure.
    
    Features:
    - Creates hierarchical folder structure per domain (/domain/P0/, /domain/P1/)
    - Maps dependencies to Wrike Key+FS format (e.g., "5FS" = Finish-to-Start)
    - P0 activities = High priority, P1 = Normal priority
    - Includes category tags in description ([DMARC], [SPF], etc.)
    - Semicolon-separated format without unnecessary quotes (Wrike-compliant)
    - UTF-8 encoding for international domain names

.PARAMETER InputCsv
    Path to the input activity plan CSV file.

.PARAMETER OutputCsv
    Path to the output Wrike CSV file. If not specified, will create a file with
    "-wrike" suffix in the same directory as the input file.

.EXAMPLE
    .\Convert-ActivityPlanToWrike.ps1 -InputCsv output\project-name\activity-plan-20251021-191931.csv
    # Creates: output\project-name\activity-plan-20251021-191931-wrike.csv

.EXAMPLE
    .\Convert-ActivityPlanToWrike.ps1 -InputCsv .\activity-plan.csv -OutputCsv .\custom-wrike.csv

.NOTES
    IMPORTANT: Wrike requires XLSX format for import:
    1. Open the generated CSV file in Excel
    2. File → Save As → Excel Workbook (.xlsx)
    3. Import the XLSX file to Wrike (not the CSV)
    
    Author: Mailchecker
    Version: 1.0
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]$InputCsv,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputCsv
)

# Validate input file exists
if (-not (Test-Path $InputCsv)) {
    Write-Error "Input file not found: $InputCsv"
    exit 1
}

# Generate output file path if not specified
if (-not $OutputCsv) {
    $inputFile = Get-Item $InputCsv
    $directory = $inputFile.DirectoryName
    $baseName = $inputFile.BaseName
    $OutputCsv = Join-Path $directory "$baseName-wrike.csv"
}

Write-Host "Reading activity plan from: $InputCsv" -ForegroundColor Cyan
Write-Host "Will write Wrike format to: $OutputCsv" -ForegroundColor Cyan

# Read input CSV
try {
    $activities = Import-Csv -Path $InputCsv -Encoding UTF8
} catch {
    Write-Error "Failed to read input CSV: $_"
    exit 1
}

if ($activities.Count -eq 0) {
    Write-Error "No activities found in input file."
    exit 1
}

Write-Host "Found $($activities.Count) activities" -ForegroundColor Green

# Wrike output structure
$wrikeRows = @()
$currentKey = 0
$activityKeyMap = @{}  # Maps ActivityID to Wrike Key for dependency resolution

# Group activities by Domain, then by Phase
$groupedByDomain = $activities | Group-Object -Property Domain | Sort-Object Name

foreach ($domainGroup in $groupedByDomain) {
    $domain = $domainGroup.Name
    Write-Host "Processing domain: $domain" -ForegroundColor Cyan
    
    # Create domain folder row
    $currentKey++
    $wrikeRows += [PSCustomObject]@{
        Key = $currentKey
        Folder = "/"
        'Parent task' = ""
        'Default task workflow' = "Default Workflow"
        'Default project workflow' = "Default Workflow"
        Title = "/$domain/"
        Workflow = ""
        Status = ""
        'Custom status' = ""
        Priority = ""
        'Assigned To' = ""
        'Start Date' = ""
        Duration = ""
        'Duration (Hours)' = ""
        'Time Spent (Hours)' = ""
        'End Date' = ""
        'Depends On' = ""
        'Start Date Constraint' = ""
        Description = ""
    }
    
    # Group domain activities by Phase
    $groupedByPhase = $domainGroup.Group | Group-Object -Property Phase | Sort-Object Name
    
    foreach ($phaseGroup in $groupedByPhase) {
        $phase = $phaseGroup.Name
        
        # Create phase folder row
        $currentKey++
        $wrikeRows += [PSCustomObject]@{
            Key = $currentKey
            Folder = "/$domain/"
            'Parent task' = ""
            'Default task workflow' = "Default Workflow"
            'Default project workflow' = "Default Workflow"
            Title = "/$domain/$phase/"
            Workflow = ""
            Status = ""
            'Custom status' = ""
            Priority = ""
            'Assigned To' = ""
            'Start Date' = ""
            Duration = ""
            'Duration (Hours)' = ""
            'Time Spent (Hours)' = ""
            'End Date' = ""
            'Depends On' = ""
            'Start Date Constraint' = ""
            Description = ""
        }
        
        # Add activities for this phase
        foreach ($activity in $phaseGroup.Group) {
            $currentKey++
            
            # Store the mapping for dependency resolution
            $activityKeyMap[$activity.ActivityID] = $currentKey
            
            # Map priority: P0 = High, P1 = Normal
            $priority = if ($activity.Phase -eq "P0") { "High" } else { "Normal" }
            
            # Calculate duration in hours (assuming 8-hour workdays)
            $durationDays = [int]$activity.EstimatedDays
            $durationHours = $durationDays * 8
            $durationHoursFormatted = "{0}:00" -f $durationHours
            
            # Build description with category tag
            $description = "[$($activity.Category)] $($activity.BusinessImpact)"
            
            # Create task row
            $wrikeRows += [PSCustomObject]@{
                Key = $currentKey
                Folder = "/$domain/$phase/"
                'Parent task' = ""
                'Default task workflow' = ""
                'Default project workflow' = ""
                Title = $activity.ActivityDescription
                Workflow = "Default Workflow"
                Status = "Active"
                'Custom status' = "New"
                Priority = $priority
                'Assigned To' = ""
                'Start Date' = $activity.StartDate
                Duration = "$durationDays days"
                'Duration (Hours)' = $durationHoursFormatted
                'Time Spent (Hours)' = ""
                'End Date' = $activity.EndDate
                'Depends On' = ""  # Will be filled in second pass
                'Start Date Constraint' = ""
                Description = $description
            }
        }
    }
}

Write-Host "Created $($wrikeRows.Count) rows (folders + tasks)" -ForegroundColor Green

# Second pass: Resolve dependencies
Write-Host "Resolving dependencies..." -ForegroundColor Cyan
$dependencyCount = 0

foreach ($row in $wrikeRows) {
    # Skip folder rows (they have empty Title or Title ending with /)
    if ($row.Title -match '^/.*/$') {
        continue
    }
    
    # Find the original activity by matching key back
    $activityKey = $row.Key
    $originalActivity = $activities | Where-Object { 
        $activityKeyMap[$_.ActivityID] -eq $activityKey 
    } | Select-Object -First 1
    
    if ($originalActivity -and $originalActivity.DependsOn) {
        $dependsOnActivityId = $originalActivity.DependsOn.Trim()
        
        if ($dependsOnActivityId -and $activityKeyMap.ContainsKey($dependsOnActivityId)) {
            $dependsOnKey = $activityKeyMap[$dependsOnActivityId]
            $row.'Depends On' = "${dependsOnKey}FS"  # FS = Finish-to-Start
            $dependencyCount++
        }
    }
}

Write-Host "Resolved $dependencyCount dependencies" -ForegroundColor Green

# Write output CSV with semicolon separator (Wrike format)
Write-Host "Writing Wrike CSV to: $OutputCsv" -ForegroundColor Cyan

# Manually build CSV with semicolons and minimal quoting
$csvContent = @()

# Header row
$headers = @(
    'Key', 'Folder', 'Parent task', 'Default task workflow', 'Default project workflow',
    'Title', 'Workflow', 'Status', 'Custom status', 'Priority', 'Assigned To',
    'Start Date', 'Duration', 'Duration (Hours)', 'Time Spent (Hours)', 'End Date',
    'Depends On', 'Start Date Constraint', 'Description'
)
$csvContent += $headers -join ';'

# Data rows
foreach ($row in $wrikeRows) {
    $values = @(
        $row.Key,
        $row.Folder,
        $row.'Parent task',
        $row.'Default task workflow',
        $row.'Default project workflow',
        $row.Title,
        $row.Workflow,
        $row.Status,
        $row.'Custom status',
        $row.Priority,
        $row.'Assigned To',
        $row.'Start Date',
        $row.Duration,
        $row.'Duration (Hours)',
        $row.'Time Spent (Hours)',
        $row.'End Date',
        $row.'Depends On',
        $row.'Start Date Constraint',
        $row.Description
    )
    $csvContent += $values -join ';'
}

# Write to file with UTF8 encoding
try {
    $csvContent | Out-File -FilePath $OutputCsv -Encoding UTF8
    Write-Host "✅ Successfully created Wrike import file: $OutputCsv" -ForegroundColor Green
    Write-Host ""
    Write-Host "IMPORTANT: Wrike requires XLSX format for import!" -ForegroundColor Yellow
    Write-Host "  1. Open $OutputCsv in Excel" -ForegroundColor Yellow
    Write-Host "  2. File → Save As → Excel Workbook (.xlsx)" -ForegroundColor Yellow
    Write-Host "  3. Import the XLSX file to Wrike (not the CSV)" -ForegroundColor Yellow
} catch {
    Write-Error "Failed to write output CSV: $_"
    exit 1
}

